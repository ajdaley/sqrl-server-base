package com.github.dbadia.sqrl.server;
import static junit.framework.TestCase.assertEquals;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.net.InetAddress;
import java.util.Base64;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.servlet.http.HttpServletResponse;

import org.junit.Test;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import com.github.dbadia.sqrl.server.SqrlConfig;
import com.github.dbadia.sqrl.server.SqrlIdentityPersistance;
import com.github.dbadia.sqrl.server.SqrlServerOperations;

import junit.framework.TestCase;
import junitx.framework.StringAssert;

public class SqrlServerOperationsTest {

	@Test
	public void testQuery() throws Throwable {
		// TODO: need valid test data once SQRL client base64 idk bug is fixed
		final String configBackchannelPath = "/sqrlbc";
		final String loginRequestUrl = "http://127.0.0.1:8080/sqrlexample/login";
		final String sqrlRequestUrl = "qrl://127.0.0.1:8080/sqrlexample/sqrlbc";
		final String expectedPath = "/sqrlexample/sqrlbc";

		// Data from a real transaction with a long expiry
		final SqrlIdentityPersistance sqrlPersistance = TCUtil.buildValidSqrlPersistance();
		final SqrlConfig sqrlConfig = TCUtil.buildValidSqrlConfig();
		sqrlConfig.setNutValidityInSeconds(Integer.MAX_VALUE);
		sqrlConfig.setBackchannelServletPath(configBackchannelPath);

		final SqrlServerOperations sqrlServerOps = new SqrlServerOperations(sqrlPersistance, sqrlConfig);

		// Emulate the login page generation
		final MockHttpServletRequest loginPageRequest = TCUtil.buildMockRequest(loginRequestUrl);
		sqrlServerOps.buildQrCodeForAuthPage(loginPageRequest, InetAddress.getByName("localhost"), 250);

		// Emulate the SQRL client sending the QUERY request
		final MockHttpServletRequest servletRequest = TCUtil.buildMockRequest(sqrlRequestUrl);
		servletRequest.setParameter("client",
				"dmVyPTENCmNtZD1xdWVyeQ0KaWRrPUNXNkVYRU1kY2xaYzNKRUpreV9Ld01GX0RoTWJrVjE1RTZRMTRweXFNTlkNCm9wdD1zdWsNCg");
		servletRequest.setParameter("server",
				"cXJsOi8vMTI3LjAuMC4xOjgwODAvc3FybGV4YW1wbGUvc3FybGJjP251dD1tczZha2tmT1lFUkI2T0FQTzZqaFNnJnNmbj1VMUZTVENCS1ZVNUpWQ0IwWlhOMCZjb3I9eUhXNHdHLzF4WGZXWUFYZngxV1ViUG5sZW1iK3piN0tDVkUwSitWNiszaw");
		servletRequest.setParameter("ids",
				"lFQxw5Iz7OcVPgyUFUiIVPJnrZMKsV2maGknnsCM1eyR24Fz1LCTD_xIbvrjYgk-n04KTP3OSgdbW6MrPrn_Bw");
		final MockHttpServletResponse servletResponse = new MockHttpServletResponse();
		sqrlServerOps.handleSqrlClientRequest(servletRequest, servletResponse);
		// Check the response generated by our code
		assertEquals(HttpServletResponse.SC_OK, servletResponse.getStatus());
		final Map<String, String> responseDataTable = parseSqrlResponse(servletResponse.getContentAsString());
		assertEquals(4, responseDataTable.size());
		assertEquals("1", responseDataTable.get("ver"));
		StringAssert.assertStartsWith(expectedPath + "?nut=", responseDataTable.get("qry"));
		StringAssert.assertContains("cor=", responseDataTable.get("qry"));
		assertEquals("0", responseDataTable.get("tif"));
	}


	// TODO: need new test data bc of base64 mixup - ASSERT commented out, needs to be FIXED
	@Test
	public void testIdent() throws Throwable {
		final String configBackchannelPath = "/sqrlbc";
		final String loginRequestUrl = "http://127.0.0.1:8080/sqrlexample/login";
		final String sqrlRequestUrl = "qrl://127.0.0.1:8080/sqrlexample/sqrlbc";
		final String expectedPath = "/sqrlexample/sqrlbc";

		final String sqrlIdk = "CW6EXEMdclZc3JEJky_KwMF_DhMbkV15E6Q14pyqMNY";

		// Prep persistance with the data that would be present from the QUERY command
		final SqrlIdentityPersistance sqrlPersistance = TCUtil.buildValidSqrlPersistance();
		final Map<String, String> dataToStore = new ConcurrentHashMap<String, String>();
		dataToStore.put("suk", "123"); // Value doesn't matter in this case
		sqrlPersistance.storeSqrlDataForSqrlIdentity(sqrlIdk, dataToStore);

		// Data from a real transaction with a long expiry
		final SqrlConfig sqrlConfig = TCUtil.buildValidSqrlConfig();
		sqrlConfig.setNutValidityInSeconds(Integer.MAX_VALUE);
		sqrlConfig.setBackchannelServletPath(configBackchannelPath);

		final SqrlServerOperations sqrlServerOps = new SqrlServerOperations(sqrlPersistance, sqrlConfig);

		// Emulate the login page generation
		final MockHttpServletRequest loginPageRequest = TCUtil.buildMockRequest(loginRequestUrl);
		sqrlServerOps.buildQrCodeForAuthPage(loginPageRequest, InetAddress.getByName("localhost"), 250);

		// Emulate the SQRL client sending the IDENT request
		final MockHttpServletRequest servletRequest = TCUtil.buildMockRequest(sqrlRequestUrl);
		servletRequest.setParameter("client",
				"dmVyPTENCmNtZD1pZGVudA0KaWRrPUNXNkVYRU1kY2xaYzNKRUpreV9Ld01GX0RoTWJrVjE1RTZRMTRweXFNTlkNCm9wdD1zdWsNCg");
		servletRequest.setParameter("server",
				"dmVyPTENCm51dD1aTXk4VEI2NV8tZzV6bDQ5SWZ0dUhBDQp0aWY9MQ0KcXJ5PS9zcXJsZXhhbXBsZS9zcXJsYmM_bnV0PVpNeThUQjY1Xy1nNXpsNDlJZnR1SEEmY29yPUdVam1Obi1BeTJNNXJ6a2xTLWZ2dnp6OGhmQ0ZBTERCSGFNbGQ4VUNDLW8NCnN1az1udWxs");
		servletRequest.setParameter("ids",
				"fcx_jMhh-4UmrRkE_dKPIOfM0ZzIbwrFy9H_Zb5QEG8-GEPZIqZIvN1YeNTzFt3Lx1zwdY3HKhw5PmtXwpaCAw");
		final MockHttpServletResponse servletResponse = new MockHttpServletResponse();
		sqrlServerOps.handleSqrlClientRequest(servletRequest, servletResponse);
		// Check the response generated by our code

		// TODO:
		// assertEquals(HttpServletResponse.SC_OK, servletResponse.getStatus());
		// final Map<String, String> responseDataTable = parseSqrlResponse(servletResponse.getContentAsString());
		// assertEquals(5, responseDataTable.size());
		// assertEquals("1", responseDataTable.get("ver"));
		// StringAssert.assertStartsWith(expectedPath + "?nut=", responseDataTable.get("qry"));
		// StringAssert.assertContains("cor=", responseDataTable.get("qry"));
		// assertEquals("0", responseDataTable.get("tif"));
		// assertEquals("123", responseDataTable.get("suk"));
	}

	/* **************** SqrlConfig validation tests **************/
	@Test
	public void testValidateSqrlConfig_ConfigIsNull() {
		try {
			new SqrlServerOperations(TCUtil.buildValidSqrlPersistance(), null);
			TestCase.fail("Exception expected");
		} catch (final Exception e) {
			TestCase.assertTrue(e.getMessage().contains("SqrlConfig"));
			TestCase.assertTrue(e.getMessage().contains("not be null"));
		}
	}

	@Test
	public void testValidateSqrlConfig_PersistanceIsNull() {
		try {
			new SqrlServerOperations(null, TCUtil.buildValidSqrlConfig());
			TestCase.fail("Exception expected");
		} catch (final Exception e) {
			TestCase.assertTrue(e.getMessage().contains("SqrlPersistance"));
			TestCase.assertTrue(e.getMessage().contains("not be null"));
		}
	}

	/* ************* Util methods **************************/
	static Map<String, String> parseSqrlResponse(final String contentAsString) throws IOException {
		final Map<String, String> dataTable = new ConcurrentHashMap<String, String>();
		final String data = new String(Base64.getUrlDecoder().decode(contentAsString));
		try (BufferedReader reader = new BufferedReader(new StringReader(data))) {
			String line = reader.readLine();
			while (line != null) {
				if (line.trim().length() == 0) {
					continue;
				}
				final int index = line.indexOf('=');
				TestCase.assertTrue("Could not find = in line: " + line, index != -1);
				final String name = line.substring(0, index);
				final String value = line.substring(index + 1);
				dataTable.put(name, value);
				line = reader.readLine();
			}
		}
		return dataTable;
	}
}
